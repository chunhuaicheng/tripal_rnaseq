<?php
/**
 * @file
 * Functions used to install the module
 */

/**
 * Implements install_hook().
 *
 * Permforms actions when the module is first installed.
 *
 * @ingroup tripal_rnaseq
 */
function tripal_rnaseq_install() {
  tripal_create_files_dir('tripal_rnaseq');
  tripal_create_files_dir('tripal_rnaseq_exp');
  tripal_rnaseq_add_custom_tables();
  tripal_rnaseq_add_cvterms();
}

/**
 * Create experiment table in chado
 */ 
function tripal_rnaseq_add_custom_tables() {
  $schema = array(
    'table' => 'feature_experiment',
    'fields' => array(
      'feature_experiment_id'  => array('type' => 'serial', 'size' => 'big', 'not null' => TRUE),
      'experiment_id' => array('type' => 'int', 'size' => 'big', 'not null' => TRUE),
      'feature_id'     => array('type' => 'int', 'size' => 'big', 'not null' => TRUE),
      'pub_id'     => array('type' => 'int', 'size' => 'big', 'not null' => TRUE),
    ),
    'primary key' => array('feature_experiment_id'),
    'indexes' => array(
      'idx1' => array('experiment_id'),
      'idx2' => array('feature_id'),
      'idx3' => array('pub_id'),
    ),
    'unique keys' => array(
      'c1' => array('experiment_id', 'feature_id', 'pub_id'),
    ),
    'foreign keys' => array(
      'experiment_id' => array(
        'table' => 'experiment',
        'columns' => array(
          'experiment_id' => 'experiment_id',
        ),
      ),
      'feature_id' => array(
        'table' => 'feature',
        'columns' => array(
          'feature_id' => 'feature_id',
        ),
      ),
    )
  );
  if (!db_table_exists('chado.feature_experiment')) {
    db_create_table('chado.feature_experiment', $schema);
    // Drupal doesn't support FK's. Use SQL command to add them
    $sql = "
    ALTER TABLE ONLY chado.feature_experiment
    ADD CONSTRAINT feature_experiment_experiment_id_fkey
    FOREIGN KEY (experiment_id) REFERENCES chado.experiment(experiment_id)
    ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED";
    db_query($sql);
    $sql = "
    ALTER TABLE ONLY chado.feature_experiment
    ADD CONSTRAINT feature_experiment_feature_id_fkey
    FOREIGN KEY (feature_id) REFERENCES chado.feature(feature_id)
    ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED";
    db_query($sql);
  }
  db_query("DELETE FROM {tripal_custom_tables} WHERE table_name = 'feature_experiment'");
  $record = new stdClass();
  $record->table_name = 'feature_experiment';
  $record->schema = serialize($schema);
  drupal_write_record('tripal_custom_tables', $record);
  
   $schema = array(
    'table' => 'feature_experimentprop',
    'fields' => array(
      'feature_experimentprop_id'  => array('type' => 'serial', 'size' => 'big', 'not null' => TRUE),
      'feature_experiment_id' => array('type' => 'int', 'size' => 'big', 'not null' => TRUE),
      'type_id'     => array('type' => 'int', 'size' => 'big', 'not null' => TRUE),
      'value'    => array('type' => 'text', 'not null' => FALSE),
      'rank'           => array('type' => 'int', 'default' => 0, 'not null' => TRUE),
    ),
    'primary key' => array('feature_experimentprop_id'),
    'indexes' => array(
      'idx1' => array('feature_experiment_id'),
      'idx2' => array('type_id'),
    ),
    'unique keys' => array(
      'c1' => array('feature_experiment_id', 'type_id', 'rank'),
    ),
     'foreign keys' => array(
       'feature_experiment_id' => array(
         'table' => 'feature_experiment',
         'columns' => array(
           'feature_experiment_id' => 'feature_experiment_id',
         ),
       ),
       'type_id' => array(
         'table' => 'cvterm',
         'columns' => array(
           'type_id' => 'cvterm_id',
         ),
       ),
     )
  );
  // Drupal doesn't support FK's. Use SQL command to add them
   if (!db_table_exists('chado.feature_experimentprop')) {
    db_create_table('chado.feature_experimentprop', $schema);
    $sql = "
    ALTER TABLE ONLY chado.feature_experimentprop
    ADD CONSTRAINT feature_experimentprop_feature_experiment_id_fkey
    FOREIGN KEY (feature_experiment_id) REFERENCES chado.feature_experiment(feature_experiment_id)
    ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED";
    db_query($sql);
    $sql = "
    ALTER TABLE ONLY chado.feature_experimentprop
    ADD CONSTRAINT feature_experimentprop_type_id_fkey
    FOREIGN KEY (type_id) REFERENCES chado.cvterm(cvterm_id)
    ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED";
    db_query($sql);
   }
   db_query("DELETE FROM {tripal_custom_tables} WHERE table_name = 'feature_experimentprop'");
   $record = new stdClass();
   $record->table_name = 'feature_experimentprop';
   $record->schema = serialize($schema);
   drupal_write_record('tripal_custom_tables', $record);
}

/**
 * add cvterms for expression value
 */
function tripal_rnaseq_add_cvterms() {

  $expression_term = array(
    'raw_count' => 'raw count number of reads',
    'RPKM' => 'Reads Per Kilobase of transcript per Million', 
    'FPKM' => 'Fragments Per Kilobase of transcript per Million',
    'RPM'  => 'Reads per Million',
	'SD_raw_count' => 'SD for error bar of raw count',
    'SD_RPKM' => 'SD for error bar of RPKM',
    'SD_FPKM' => 'SD for error bar of FPKM',
    'SD_RPM'  => 'SD for error bar of RPM'
  );

  tripal_insert_cv(
    'tripal_rnaseq',
    'Contains property terms for tripal rnaseq.'
  );

  foreach ($expression_term as $term => $description) {
    tripal_insert_cvterm(array(
      'name' => $term,
      'definition' => $description,
      'cv_name' => 'tripal_rnaseq',
      'db_name' => 'tripal_sra',
    ));
  }
}

/** 
 * Implements hook_schema()
 */
function tripal_rnaseq_schema() {
  // table for store loaded expression file as node, which used for display in gene feature page 
  $schema['chado_rnaseq'] = array(
    'description' => t('The table for RNASeq node'),
    'fields' => array(
      'nid' => array(
        'description' => t('The primary identifier for a node.'),
        'type' => 'serial', 'unsigned' => true, 'not null' => true,
      ),
      'name' => array(
        'description' => t('The human-readable name for experession file.'),
        'type' => 'varchar', 'length' => 1023, 'not null' => true,
      ),
      'path' => array(
        'description' => t('The full path of the expression file.'),
        'type' => 'varchar', 'length' => 1023, 'not null' => true,
      ),
      'type_id' => array(
        'description' => t('The type of the expression value.'),
        'type' => 'int', 'size' => 'big', 'not null' => true,
      ),
      'project_id' => array(
        'description' => t('the project id.'),
        'type' => 'int', 'size' => 'big', 'not null' => true,
      ),
      'organism_id' => array(
        'description' => t('the organism id.'),
        'type' => 'int', 'size' => 'big', 'not null' => true,
      ),
    ),
    'indexes' => array(
      'name' => array('name'),
    ),
    'primary key' => array('nid'),
    'unique keys' => array(
      'nid' => array('nid'),
      'type_project_id' => array('type_id', 'project_id', 'organism_id'),
    ),
  );

  return $schema;
} 

/**
 * Implements hook_update(),
 * 
 * update chado.feature_expression
 * change the field name from expression_id to expreriment_id
 * FOREIGN KEY (experiment_id) REFERENCES expression(expression_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED
 * FOREIGN KEY (experiment_id) REFERENCES experiment(experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED
 *
 *  drop the constraint "feature_expression_pub_id_fkey" on "feature_expression"?
 *
 * can not do it, already did it manually 
 */

function tripal_rnaseq_update_1000() {

  // Changing the length of the type field to allow it to be more readable.
  //db_change_field('chado.feature_expression', 'expression_id', 'experiment_id',
  //  array(
  //      'description' => t('link it to experiment table of tripal_sra module.'),
  //  )
  //);
}

